{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { API } from '../../../commons';\nexport default (async (req, res) => {\n  try {\n    const {\n      data\n    } = await axios.get(API.R_M.characters);\n    res.status(200).send(_objectSpread({}, data));\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});","map":{"version":3,"sources":["/Users/juan.marval/projects/nextjs/rick-and-morty/pages/api/character/index.ts"],"names":["axios","API","req","res","data","get","R_M","characters","status","send","error"],"mappings":";;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,GAAT,QAAoB,kBAApB;AACA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAUJ,GAAG,CAACK,GAAJ,CAAQC,UAAlB,CAAvB;AACAJ,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,mBACKL,IADL;AAGD,GALD,CAKE,OAAOM,KAAP,EAAc;AACdP,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,KAArB;AACD;AACF,CATD","sourcesContent":["import { NextApiRequest, NextApiResponse } from 'next'\nimport axios from 'axios'\n\nimport { API } from '../../../commons'\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  try {\n    const { data } = await axios.get(API.R_M.characters)\n    res.status(200).send({\n      ...data\n    })\n  } catch (error) {\n    res.status(500).send(error)\n  }\n}"]},"metadata":{},"sourceType":"module"}